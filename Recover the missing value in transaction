#include <string.h>
#include <iostream>

typedef unsigned char cc8;
typedef unsigned int ii32;
typedef unsigned long long ii64;


class SHA256
{
 	protected:
    	const static ii32 sha256_k[];
    	static const unsigned int SHA224_256_BLOCK_SIZE = (512/8);
	public:
    	void init();
    	void fresh(const cc8 *message, ii32 len);
    	void result(cc8 *digest);
    	static const ii32 DIGEST_SIZE = ( 256 / 8);
 
	protected:
   	 	void trans(const cc8 *message, ii32 block_nb);
    	ii32 m_tot_len;
    	ii32 m_len;
    	cc8 m_block[2*SHA224_256_BLOCK_SIZE];
    	ii32 h[8];
};

std::string sha256(std::string input);
 
#define SHA2_SHFR(x, n)    (x >> n)
#define SHA2_ROTR(x, n)   ((x >> n) | (x << ((sizeof(x) << 3) - n)))
#define SHA2_ROTL(x, n)   ((x << n) | (x >> ((sizeof(x) << 3) - n)))
#define SHA2_CH(x, y, z)  ((x & y) ^ (~x & z))
#define SHA2_MAJ(x, y, z) ((x & y) ^ (x & z) ^ (y & z))
#define SHA256_F1(x) (SHA2_ROTR(x,  2) ^ SHA2_ROTR(x, 13) ^ SHA2_ROTR(x, 22))
#define SHA256_F2(x) (SHA2_ROTR(x,  6) ^ SHA2_ROTR(x, 11) ^ SHA2_ROTR(x, 25))
#define SHA256_F3(x) (SHA2_ROTR(x,  7) ^ SHA2_ROTR(x, 18) ^ SHA2_SHFR(x,  3))
#define SHA256_F4(x) (SHA2_ROTR(x, 17) ^ SHA2_ROTR(x, 19) ^ SHA2_SHFR(x, 10))
#define SHA2_UNPACK32(x, str)                 \
{                                             \
    *((str) + 3) = (cc8) ((x)      );       \
    *((str) + 2) = (cc8) ((x) >>  8);       \
    *((str) + 1) = (cc8) ((x) >> 16);       \
    *((str) + 0) = (cc8) ((x) >> 24);       \
}
#define SHA2_PACK32(str, x)                   \
{                                             \
    *(x) =   ((ii32) *((str) + 3)      )    \
           | ((ii32) *((str) + 2) <<  8)    \
           | ((ii32) *((str) + 1) << 16)    \
           | ((ii32) *((str) + 0) << 24);   \
}
const ii32 SHA256::sha256_k[64] = 
            {0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
             0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
             0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
             0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
             0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
             0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
             0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
             0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
             0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
             0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
             0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
             0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
             0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
             0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
             0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
             0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

 
void SHA256::init()
{
    h[0] = 0x6a09e667;
    h[1] = 0xbb67ae85;
    h[2] = 0x3c6ef372;
    h[3] = 0xa54ff53a;
    h[4] = 0x510e527f;
    h[5] = 0x9b05688c;
    h[6] = 0x1f83d9ab;
    h[7] = 0x5be0cd19;
    m_len = 0;
    m_tot_len = 0;
}

void SHA256::fresh(const cc8 *message, ii32 len)
{
    ii32 block_nb;
    ii32 new_len, rem_len, tmp_len;
    const cc8 *shifted_message;
    tmp_len = SHA224_256_BLOCK_SIZE - m_len;
    rem_len = len < tmp_len ? len : tmp_len;
    memcpy(&m_block[m_len], message, rem_len);
    if (m_len + len < SHA224_256_BLOCK_SIZE) {
        m_len += len;
        return;
    }
    new_len = len - rem_len;
    block_nb = new_len / SHA224_256_BLOCK_SIZE;
    shifted_message = message + rem_len;
    trans(m_block, 1);
    trans(shifted_message, block_nb);
    rem_len = new_len % SHA224_256_BLOCK_SIZE;
    memcpy(m_block, &shifted_message[block_nb << 6], rem_len);
    m_len = rem_len;
    m_tot_len += (block_nb + 1) << 6;
}

void SHA256::trans(const cc8 *message, ii32 block_nb)
{
    ii32 w[64];
    ii32 v[8];
    ii32 t1, t2;
    const cc8 *sub_block;
    int i;
    int j;
    for (i = 0; i < (int) block_nb; i++) {
        sub_block = message + (i << 6);
        for (j = 0; j < 16; j++) {
            SHA2_PACK32(&sub_block[j << 2], &w[j]);
        }
        for (j = 16; j < 64; j++) {
            w[j] =  SHA256_F4(w[j -  2]) + w[j -  7] + SHA256_F3(w[j - 15]) + w[j - 16];
        }
        for (j = 0; j < 8; j++) {
            v[j] = h[j];
        }
        for (j = 0; j < 64; j++) {
            t1 = v[7] + SHA256_F2(v[4]) + SHA2_CH(v[4], v[5], v[6])
                + sha256_k[j] + w[j];
            t2 = SHA256_F1(v[0]) + SHA2_MAJ(v[0], v[1], v[2]);
            v[7] = v[6];
            v[6] = v[5];
            v[5] = v[4];
            v[4] = v[3] + t1;
            v[3] = v[2];
            v[2] = v[1];
            v[1] = v[0];
            v[0] = t1 + t2;
        }
        for (j = 0; j < 8; j++) {
            h[j] += v[j];
        }
    }
}

 

 
void SHA256::result(cc8 *digest)
{
    ii32 block;
    ii32 p_len;
    ii32 len;
    int i;
    block = (1 + ((SHA224_256_BLOCK_SIZE - 9)
                     < (m_len % SHA224_256_BLOCK_SIZE)));
    len = (m_tot_len + m_len) << 3;
    p_len = block << 6;
    memset(m_block + m_len, 0, p_len - m_len);
    m_block[m_len] = 0x80;
    SHA2_UNPACK32(len, m_block + p_len - 4);
    trans(m_block, block);
    for (i = 0 ; i < 8; i++) {
        SHA2_UNPACK32(h[i], &digest[i << 2]);
    }
}
 
std::string sha256(std::string input)
{
    cc8 digest[SHA256::DIGEST_SIZE];
    memset(digest,0,SHA256::DIGEST_SIZE);
 
    SHA256 ctx = SHA256();
    ctx.init();
    ctx.fresh( (cc8*)input.c_str(), input.length());
    ctx.result(digest);
 
    char buf[2*SHA256::DIGEST_SIZE+1];
    buf[2*SHA256::DIGEST_SIZE] = 0;
    for (int i = 0; i < SHA256::DIGEST_SIZE; i++)
        sprintf(buf+i*2, "%02x", digest[i]);
    return std::string(buf);
}


#include<stdio.h>
#include<iostream>
#include<string.h>
#include<stdio.h>
#include<iostream>
#include<string.h>
#include<vector>
#include<bits/stdc++.h>
#include<math.h>

using std::string;
using std::cout;
using std::endl;


const std::vector<std::string> sep(const std::string &sss ,const char &delimiter){
	
	std::vector<std::string> out;
	std::stringstream ss(sss);
	std::string tok;
	while(std::getline(ss,tok,delimiter)){
		out.push_back(tok);
	}
	return out;
}

using namespace std;



	long long money = -1;
	string data[3];
	string smoney="0";
	string block = "1";
	string non[3];
	string out,out1;
	string in;
	vector<string> x;
	unsigned long long n = 0;
	string code = "0000000000000000000000000000000000000000000000000000000000000000";
	string code1;
	int total = 0,t = 0;
	vector<string> name;
	
	void process(){
		do{
		in = block + non[0] + data[0] + code;
		out= sha256(in);
		if(out[0] == '0'&& out[1] == '0'&& out[2] == '0'&& out[3] == '0'){
			code = out;
			block = std::to_string(2);
			n = 0;
			break;
		}
		else{
			n++;
			non[0] = std::to_string(n);
		}
		}while(1);
	}
	
	void process1(){
		do{
			in = block + non[1] + x[0] + smoney + x[1] + code;
			
			out = sha256(in);
			if(out[0] == '0'&& out[1] == '0'&& out[2] == '0'&& out[3] == '0'){
				code1 = out;
				block = std::to_string(3);
				break;
			}
			else{
				money++;
				smoney = std::to_string(money);
			}
		}while(1);
		
	}
	
	void process2(){
		do{
			in = block + non[2] + data[2] + code1;
			
			out = sha256(in);
			if(out[0] == '0'&& out[1] == '0'&& out[2] == '0'&& out[3] == '0'){
				code1 = out;
				
				break;
			}
			else{
				n++;
				non[2] = std::to_string(n);
			}
		}while(1);
	}
	
	

int main()
{
	
	
	for(int i=0;i<2;i++){
		getline(cin,data[i]);
	}
	
	getline(cin,non[1]);
	getline(cin,data[2]);	
	getline(cin,out1);
	non[0] = non[2] = "0";
	
	
	process();
	
	std::vector<std::string> ret = sep(data[1],'_');
	for(auto&a:ret){
		x.push_back(a);
	}

	while(1){
		money++;
		smoney = std::to_string(money);
		
		process1();
	
		process2();
		
		if(code1 == out1)
			break;
		else{
			n = 0;
			block = std::to_string(2);
			non[2] = std::to_string(n);
		}
	}
	
	
	std::vector<std::string> r = sep(data[0],' ');
	for(auto&a:r){
		name.push_back(a);
		t++;
	}
	for(int i = 0;i<t;i++){
		if(name[i]=="pays"){
			if(name[i-1]=="Alice")
				total -= atoi(name[i+2].c_str());
			else if(name[i+1]=="Alice")
				total += atoi(name[i+2].c_str());
		}
	}
	name.clear();
	t = 0;
	
	std::vector<std::string> re = sep(data[1],' ');
	for(auto&a:re){
		name.push_back(a);
		t++;
	}
	for(int i = 0;i<t;i++){
		if(name[i]=="pays"){
			if(name[i-1]=="Alice")
				total -= money;
			else if(name[i+1]=="Alice")
				total += money;
		}
	}
	name.clear();
	t = 0;
	
	std::vector<std::string> ret1 = sep(data[2],' ');
	for(auto&a:ret1){
		name.push_back(a);
		t++;
	}
	for(int i = 0;i<t;i++){
		if(name[i]=="pays"){
			if(name[i-1]=="Alice")
				total -= std::atoi(name[i+2].c_str());
			else if(name[i+1]=="Alice")
				total += std::atoi(name[i+2].c_str());
		}
	}
	name.clear();
	t = 0;
	
	
    cout << money << "," << total << "," << non[2] << endl;
    return 0;
}
